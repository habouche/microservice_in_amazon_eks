version: "3"

services:
  db:
    image: postgres
    volumes:
      - db-data::/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: always
    # networks:
    #   - backend
    network_mode: bridge
  backend:
    build: backend/rest-web-services
    ports:
      - "8080:8080"
    links:
      - "db"
    depends_on:
      - "db"
    restart: always
    # networks: # Networks to join (Services on the same network can communicate with each other using their name)
    #   - backend
    #   - frontend
    network_mode: bridge
  frontend:
    build: frontend/todo
    links:
      - "backend"
    depends_on:
      - "backend"
    ports:
      - "4200:80"
    # networks:
    #   - frontend
    network_mode: bridge

volumes:
  db-data:
# networks:
#   backend:
#   frontend:
# version: "3.7"

# # Define services
# services:
#   # App backend service
#   app-server:
#     # Configuration for building the docker image for the backend service
#     build:
#       context: backend/rest-web-services # Use an image built from the specified dockerfile in the `polling-app-server` directory.
#       dockerfile: Dockerfile
#     ports:
#       - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
#     restart: always
#     # depends_on:
#     #   - db # This service depends on mysql. Start that first.
#     # environment: # Pass environment variables to the service
#     #   SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#     #   SPRING_DATASOURCE_USERNAME: callicoder
#     #   SPRING_DATASOURCE_PASSWORD: callicoder
#     networks: # Networks to join (Services on the same network can communicate with each other using their name)
#       - backend
#       - frontend

#   # Frontend Service
#   app-client:
#     build:
#       context: frontend/todo # Use an image built from the specified dockerfile in the `polling-app-client` directory.
#       dockerfile: Dockerfile
#     #   args:
#     #     REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
#     ports:
#       - "4200:80" # Map the exposed port 80 on the container to port 9090 on the host machine
#     restart: always
#     depends_on:
#       - app-server
#     networks:
#       - frontend

#   # Database Service (Mysql)
# #   db:
# #     image: mysql
# #     ports:
# #       - "3306:3306"
# #     restart: always
# #     environment:
# #       MYSQL_DATABASE: restapi
# #       MYSQL_USER: user
# #       MYSQL_PASSWORD: user
# #       MYSQL_ROOT_PASSWORD: root
# #     volumes:
# #       - db-data:/var/lib/mysql
# #     networks:
# #       - backend

# # # Volumes
# # volumes:
# #   db-data:

# # Networks to be created to facilitate communication between containers
# networks:
#   backend:
#   frontend:
