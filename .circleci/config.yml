version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.4.0
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-backend-<<parameters.workflow_id>>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend/todo
            npm i
            npm run build
      - save_cache:
          paths: [frontend/todo/node_modules]
          key: frontend-build

  lint-frontend:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Lint front-end
          command: |
            cd frontend/todo
            npm i
            npm run lint
      - save_cache:
          paths: [frontend/todo/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:14.15.0-browsers
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: FrontEnd Test
          command: |
            cd frontend/todo
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend/todo
            npm audit fix --audit-level=critical --force

  build-backend:
    docker:
      - image: circleci/openjdk
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend/rest-web-services
            mvn package
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - target/
      - save_cache:
          paths: [backend/rest-web-services/target]
          key: backend-build

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: backend scan
  #         command: |
  #           cd backend
  #           npm audit fix --audit-level=critical --force

  dockerize_frontend:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - setup_remote_docker
      - run:
          name: build frontend image
          command: |
            cd frontend/todo
            npm i
            npm run build
            docker build -t todo-frontend:1.0 .
            docker image ls
      - run:
          name: Publish frontend docker image
          command: |
            dockerpath="$DOCKER_USER/$DOCKER_REGISTRY"
            echo $dockerpath
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker tag todo-frontend:1.0 $dockerpath:1.0
            docker push $dockerpath:1.0

  dockerize_backend:
    docker:
      - image: circleci/openjdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build backend image
          command: |
            cd backend/rest-web-services
            chmod +x mvnw
            docker build -t todo-backend:1.0 .
            docker image ls
      - run:
          name: Publish backend docker image
          command: |
            dockerpath="$DOCKER_USER/$DOCKER_REGISTRY_BACKEND"
            echo $dockerpath
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker tag todo-backend:1.0 $dockerpath:1.0
            docker push $dockerpath:1.0

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=capstone-backend \
              --stack-name "capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "${BACKEND_IP}" >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "${BACKEND_IP}" \
              https://api.memstash.io/values/backendurl

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:cb:b5:ea:33:23:90:de:96:16:69:8a:d8:00:ef:d9"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Prepare Environment Variables
  #         command: |
  #           cat \<< EOF > backend/.env
  #           ENVIRONMENT=production
  #           VERSION=1
  #           TYPEORM_CONNECTION=postgres
  #           TYPEORM_MIGRATIONS_DIR=./src/migrations
  #           TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
  #           TYPEORM_MIGRATIONS=./src/migrations/*.ts
  #           TYPEORM_HOST=${TYPEORM_HOST}
  #           TYPEORM_PORT=${TYPEORM_PORT}
  #           TYPEORM_USERNAME=${TYPEORM_USERNAME}
  #           TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
  #           TYPEORM_DATABASE=${TYPEORM_DATABASE}
  #           EOF
  #     - run:
  #         name: install awscli
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install python \
  #             python-pip \
  #             python-setuptools \
  #             curl
  #           pip install
  #           pip --no-cache-dir install --upgrade awscli

  #     - run:
  #         name: Run migrations and send migration results to memstash
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           npm run migrations > migration-log.txt
  #           if cat migration-log.txt | grep "has been executed successfully"; then
  #             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --request PUT --data "1" \
  #               https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID:0:7}"
  #           fi
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y curl tar sudo
  #           curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
  #           yum install -y nodejs
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --request GET https://api.memstash.io/values/backendurl)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           cat \<< EOF > frontend/.env
  #           API_URL=${API_URL}
  #           EOF
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm i
  #           npm run build
  #           aws s3 cp dist s3://capstone-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-to-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:cb:b5:ea:33:23:90:de:96:16:69:8a:d8:00:ef:d9"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add tar gzip
            apk add curl
            apk add gzip
            apk add nodejs
            apk add npm
            pip install awscli
      # - run:
      #     name: Prepare Deployment Files
      #     command: |
      #       tar czvf backend.tar.gz backend
      #       cp -r backend.tar.gz /root/project/.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy To cluster
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  create_cluster:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run: sudo apt-get update
      - run: sudo apt-get install -y python3-pip python-dev
      - run: sudo pip install --upgrade awscli
      - run: aws --version

      - run:
          name: install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            kubectl version --short --client
      - run:
          name: Create EKS-Cluster
          command: |
            eksctl create cluster --name udacity-capstone --managed --node-type "t2.small" --nodes 2

  deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacity-capstone
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: udacity-capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kube/frontend.yml
          resource-name: kube/frontend

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add tar
            apk add gzip
            apk add nodejs
            apk add npm
            pip install awscli

      - run:
          name: Get backend url and smoke test
          command: |
            export BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/backendurl)
            export API_URL="http://${BACKEND_IP}:3030"
            export ENDPOINT="${API_URL}/api/status"
            if curl -s "${ENDPOINT}" | grep "ok"
            then
              echo "Backend Smoke Test Successful"
            else
              echo "Backend Smoke Test Failed"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://capstone-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            echo $OldWorkflowID    
              
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data "${OldWorkflowID}" https://api.memstash.io/values/OldWorkflowID

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=capstone

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              
              
            OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/OldWorkflowID) 
              
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://capstone-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name capstone-frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name capstone-backend-"${OldWorkflowID}"
              echo "Old Infra deleted succesfully"
            else
              echo "New stacks, Nothing to delete"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # # - test-frontend:
      # #     requires: [build-frontend]
      # - lint-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - dockerize_frontend
      # requires:
      #   - "build-frontend"
      # - dockerize_backend
      # requires:
      #   - "build-backend"
      # - deploy-infrastructure:
      #     requires: [dockerize_frontend, dockerize_backend]
      #     filters:
      #       branches:
      #         only: [main]
      - create_cluster:
          requires: [dockerize_frontend, dockerize_backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - deployment:
          requires: [create_cluster]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-to-cluster:
      #     requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
